from math import gcd

repeat_lengths = {}
remainders = {}


def main():
    global repeat_lengths, remainders
    #inputs_short = "12345678"
    #inputs_short = "03036732577212944063491565474664"
    inputs_short = '59766832516471105169175836985633322599038555617788874561522148661927081324685821180654682056538815716097295567894852186929107230155154324411726945819817338647442140954601202408433492208282774032110720183977662097053534778395687521636381457489415906710702497357756337246719713103659349031567298436163261681422438462663511427616685223080744010014937551976673341714897682634253850270219462445161703240957568807600494579282412972591613629025720312652350445062631757413159623885481128914333982571503540357043736821931054029305931122179293220911720263006705242490442826574028623201238659548887822088996956559517179003476743001815465428992906356931239533104'
    inputs = inputs_short * 10_000
    l_inputs = len(inputs_short)
    l_long = len(inputs)
    vals = [int(i) for i in inputs]
    offset =  int(inputs_short[:7])
    
    assert offset > l_long // 2

    print(f"From offset {offset} to end is {l_long-offset} places")
    for i in range(100):
        total = 0
        p =1
        while p <= (l_long - offset):
            total = (total + vals[-p])%10
            vals[-p] = total
            p += 1
    print(vals[offset:offset+8])


if __name__ == "__main__":
    main()
